{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport productsData from '../data/products.json';\n/*\n * This hook simulates an asynchronous call to an API to fetch product data for\n * the application.  It returns an object with the keys `products` and\n * `isLoading`, which respectively contain the array of products data and a\n * boolean value indicating whether the data is being \"loaded\".  A simple timer\n * is used to create the effect of an asynchronous operation.\n */\n\nfunction useProducts() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    /*\n     * \"Fetch\" products data with a delay of 1000ms.\n     */\n    setIsLoading(true);\n    setTimeout(() => {\n      setProducts(productsData);\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n  return {\n    products,\n    isLoading\n  };\n}\n\n_s(useProducts, \"LumVjmzJaC5ba0MGQg3obCFfk3k=\");\n\nexport default useProducts;","map":{"version":3,"sources":["/Users/justintan/Documents/GitHub/assignment-4-tan-justin/src/hooks/useProducts.js"],"names":["useState","useEffect","productsData","useProducts","products","setProducts","isLoading","setIsLoading","setTimeout"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAEM,SAAF,EAAaC,YAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACJ;AACA;AACIM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,IAAAA,UAAU,CAAC,MAAM;AACfH,MAAAA,WAAW,CAACH,YAAD,CAAX;AACAK,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GATQ,EASN,EATM,CAAT;AAWA,SAAO;AAAEH,IAAAA,QAAF;AAAYE,IAAAA;AAAZ,GAAP;AACD;;GAhBQH,W;;AAkBT,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport productsData from '../data/products.json';\n\n/*\n * This hook simulates an asynchronous call to an API to fetch product data for\n * the application.  It returns an object with the keys `products` and\n * `isLoading`, which respectively contain the array of products data and a\n * boolean value indicating whether the data is being \"loaded\".  A simple timer\n * is used to create the effect of an asynchronous operation.\n */\nfunction useProducts() {\n  const [ products, setProducts ] = useState([]);\n  const [ isLoading, setIsLoading ] = useState(false);\n\n  useEffect(() => {\n    /*\n     * \"Fetch\" products data with a delay of 1000ms.\n     */\n    setIsLoading(true);\n    setTimeout(() => {\n      setProducts(productsData);\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  return { products, isLoading };\n}\n\nexport default useProducts;\n"]},"metadata":{},"sourceType":"module"}