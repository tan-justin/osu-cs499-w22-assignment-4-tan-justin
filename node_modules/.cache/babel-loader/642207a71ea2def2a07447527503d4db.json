{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { RECEIVE_PRODUCT, RECEIVE_PRODUCT_STATUS, CHECK_OUT, GET_QUANTITY, ADJ_QUANTITY } from \"./action\";\nconst initialState = {\n  products: [],\n  cart: [],\n  currentItem: null\n};\n\nfunction candyStoreReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_PRODUCT:\n      return { ...state.products,\n        products: state.map[{\n          name: action.name,\n          id: action.id,\n          price: action.price,\n          inStock: action.inStock,\n          photoUrl: action.photoUrl\n        }]\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction quantityReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_QUANTITY:\n      const item = state.products.find(store => store.id === action.id);\n      const inCart = state.cart.find(item => item.id === action.id ? true : false);\n      return { ...state,\n        cart: inCart ? state.cart.map(item => item.id === action.id ? { ...item,\n          qty: item.quantity + action.quantity\n        } : item) : [...state.cart, { ...item,\n          qty: action.quantity\n        }]\n      };\n\n    case ADJ_QUANTITY:\n      return { ...state,\n        products: state.products.map(item => item.id === action.id ? { ...item,\n          inStock: item.inStock - action.quantity\n        } : item)\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction shoppingCartReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.cart;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CHECK_OUT:\n      return [...state, {}];\n  }\n}\n\nconst rootReducer = combineReducers({\n  candyStore: candyStoreReducer,\n  cart: quantityReducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/justintan/Documents/GitHub/assignment-4-tan-justin/src/Redux/reducer.js"],"names":["combineReducers","RECEIVE_PRODUCT","RECEIVE_PRODUCT_STATUS","CHECK_OUT","GET_QUANTITY","ADJ_QUANTITY","initialState","products","cart","currentItem","candyStoreReducer","state","action","type","map","name","id","price","inStock","photoUrl","quantityReducer","item","find","store","inCart","qty","quantity","shoppingCartReducer","rootReducer","candyStore"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,sBAA1B,EAAkDC,SAAlD,EAA6DC,YAA7D,EAA2EC,YAA3E,QAA+F,UAA/F;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAC,EADQ;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,WAAW,EAAE;AAHI,CAArB;;AAMA,SAASC,iBAAT,GAAwD;AAAA,MAA7BC,KAA6B,uEAArBL,YAAqB;AAAA,MAAPM,MAAO;;AAEpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKZ,eAAL;AACI,aAAM,EACF,GAAGU,KAAK,CAACJ,QADP;AAEFA,QAAAA,QAAQ,EAAEI,KAAK,CAACG,GAAN,CAAU;AACjBC,UAAAA,IAAI,EAAEH,MAAM,CAACG,IADI;AAEjBC,UAAAA,EAAE,EAAEJ,MAAM,CAACI,EAFM;AAGjBC,UAAAA,KAAK,EAAEL,MAAM,CAACK,KAHG;AAIjBC,UAAAA,OAAO,EAAEN,MAAM,CAACM,OAJC;AAKjBC,UAAAA,QAAQ,EAAEP,MAAM,CAACO;AALA,SAAV;AAFR,OAAN;;AAUJ;AACI,aAAOR,KAAP;AAbR;AAeH;;AAED,SAASS,eAAT,GAAsD;AAAA,MAA7BT,KAA6B,uEAArBL,YAAqB;AAAA,MAAPM,MAAO;;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,YAAL;AACI,YAAMiB,IAAI,GAAGV,KAAK,CAACJ,QAAN,CAAee,IAAf,CAAoBC,KAAK,IAAEA,KAAK,CAACP,EAAN,KAAaJ,MAAM,CAACI,EAA/C,CAAb;AACA,YAAMQ,MAAM,GAAGb,KAAK,CAACH,IAAN,CAAWc,IAAX,CAAgBD,IAAI,IAAEA,IAAI,CAACL,EAAL,KAAYJ,MAAM,CAACI,EAAnB,GAAwB,IAAxB,GAA+B,KAArD,CAAf;AACA,aAAQ,EACJ,GAAGL,KADC;AAEJH,QAAAA,IAAI,EAAEgB,MAAM,GAAGb,KAAK,CAACH,IAAN,CAAWM,GAAX,CAAeO,IAAI,IAAEA,IAAI,CAACL,EAAL,KAAYJ,MAAM,CAACI,EAAnB,GAClC,EAAC,GAAGK,IAAJ;AAAUI,UAAAA,GAAG,EAAEJ,IAAI,CAACK,QAAL,GAAgBd,MAAM,CAACc;AAAtC,SADkC,GACgBL,IADrC,CAAH,GACgD,CAAC,GAAGV,KAAK,CAACH,IAAV,EAAgB,EAAC,GAAGa,IAAJ;AAAUI,UAAAA,GAAG,EAAEb,MAAM,CAACc;AAAtB,SAAhB;AAHxD,OAAR;;AAKJ,SAAKrB,YAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHJ,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeO,GAAf,CAAmBO,IAAI,IAAEA,IAAI,CAACL,EAAL,KAAYJ,MAAM,CAACI,EAAnB,GAAwB,EAAC,GAAGK,IAAJ;AAAUH,UAAAA,OAAO,EAAEG,IAAI,CAACH,OAAL,GAAeN,MAAM,CAACc;AAAzC,SAAxB,GAA6EL,IAAtG;AAFP,OAAP;;AAIJ;AACI,aAAOV,KAAP;AAfR;AAiBH;;AAED,SAASgB,mBAAT,GAA+D;AAAA,MAAlChB,KAAkC,uEAA1BL,YAAY,CAACE,IAAa;AAAA,MAAPI,MAAO;;AAC3D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,SAAL;AACI,aAAM,CACF,GAAGQ,KADD,EAEF,EAFE,CAAN;AAFR;AAWH;;AAED,MAAMiB,WAAW,GAAG5B,eAAe,CAAC;AAChC6B,EAAAA,UAAU,EAAEnB,iBADoB;AAEhCF,EAAAA,IAAI,EAAEY;AAF0B,CAAD,CAAnC;AAKA,eAAeQ,WAAf","sourcesContent":["import { combineReducers } from 'redux';\nimport { RECEIVE_PRODUCT, RECEIVE_PRODUCT_STATUS, CHECK_OUT, GET_QUANTITY, ADJ_QUANTITY } from \"./action\";\n\nconst initialState = {\n    products:[],\n    cart: [], \n    currentItem: null,\n}\n\nfunction candyStoreReducer(state = initialState, action){\n\n    switch(action.type){\n        case RECEIVE_PRODUCT:\n            return{\n                ...state.products,\n                products: state.map[{\n                   name: action.name,\n                   id: action.id,\n                   price: action.price,\n                   inStock: action.inStock,\n                   photoUrl: action.photoUrl\n                }]\n            }\n        default:\n            return state;\n    }\n}\n\nfunction quantityReducer(state = initialState, action){\n    switch(action.type){\n        case GET_QUANTITY:\n            const item = state.products.find(store=>store.id === action.id)\n            const inCart = state.cart.find(item=>item.id === action.id ? true : false);\n            return  {\n                ...state,\n                cart: inCart ? state.cart.map(item=>item.id === action.id \n                ? {...item, qty: item.quantity + action.quantity} : item) : [...state.cart, {...item, qty: action.quantity}]\n            };\n        case ADJ_QUANTITY:\n            return {\n                ...state,\n                products: state.products.map(item=>item.id === action.id ? {...item, inStock: item.inStock - action.quantity} : item)\n            }\n        default: \n            return state;\n    }\n}\n\nfunction shoppingCartReducer(state = initialState.cart, action){\n    switch(action.type){\n        case CHECK_OUT:\n            return[\n                ...state,\n                {\n                    \n\n                }\n            ]\n    }\n\n}\n\nconst rootReducer = combineReducers({\n    candyStore: candyStoreReducer,  \n    cart: quantityReducer\n})\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}